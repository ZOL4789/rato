//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use std::fmt::Display;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use crate::middleware::CheckType;

#[derive(Clone, Debug, PartialEq, Serialize,DeriveEntityModel, Eq)]
#[sea_orm(table_name = "t_role")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub uid: i64,
    #[sea_orm(unique)]
    pub value: String,
    pub name: String,
    pub creator_id: i64,
    pub create_time: DateTimeUtc,
    pub updater_id: Option<i64>,
    pub update_time: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}


impl Related<super::user_role::Entity> for Entity {
    // The final relation is Role -> UserRole -> User
    fn to() -> RelationDef {
        super::user_role::Relation::User.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is UserRole -> Role,
        // after `rev` it becomes Role -> UserRole
        Some(super::user_role::Relation::Role.def().rev())
    }
}


impl Related<super::menu::Entity> for Entity {
    // The final relation is Role -> RoleMenu -> Menu
    fn to() -> RelationDef {
        super::role_menu::Relation::Menu.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is RoleMenu -> Role,
        // after `rev` it becomes Role -> RoleMenu
        Some(super::role_menu::Relation::Role.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}



#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct RoleBody {
    pub uid: i64,
    pub name: String,
    pub value: String,
    pub perm_uids: Vec<i64>,
}

#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct RoleQuery {
    pub uid: Option<i64>,
    pub name: Option<String>,
    pub value: Option<String>,
}

#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct AuthPermBody {
    pub role_id: i64,
    pub perm_uids: Vec<i64>,
}

#[derive(Deserialize, Serialize, PartialEq, Eq, Hash, Debug, Clone)]
pub enum RoleType {
    Admin,
    User,
    Api,
}

impl RoleType {
    pub fn from_str(str: &str) -> Option<RoleType> {
        match str {
            "admin" => Some(RoleType::Admin),
            "user" => Some(RoleType::User),
            "api" => Some(RoleType::Api),
            _ => None,
        }
    }
}

impl Display for RoleType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str = match self {
            RoleType::Admin => "admin",
            RoleType::User => "user",
            RoleType::Api => "api",
        };
        write!(f, "{}", str)
    }
}

#[derive(Deserialize, Serialize, Debug, Clone)]
pub struct RequireRole {
    pub roles: Vec<RoleType>,
    pub check_type: CheckType,
}

#[allow(unused)]
impl RequireRole {
    pub fn new(roles: Vec<RoleType>, check_type: CheckType) -> RequireRole {
        RequireRole { roles, check_type }
    }

    pub fn any(roles: Vec<RoleType>) -> RequireRole {
        RequireRole {
            roles,
            check_type: CheckType::Or,
        }
    }

    pub fn all(roles: Vec<RoleType>) -> RequireRole {
        RequireRole {
            roles,
            check_type: CheckType::And,
        }
    }
}
