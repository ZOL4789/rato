//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use crate::middleware::CheckType;

#[derive(Clone, Debug, PartialEq, Serialize, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "t_menu")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub uid: i64,
    #[sea_orm(unique)]
    pub value: String,
    pub name: String,
    pub r#type: String,
    pub creator_id: i64,
    pub create_time: DateTimeUtc,
    pub updater_id: Option<i64>,
    pub update_time: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::role_menu::Entity> for Entity {
    // The final relation is Menu -> RoleMenu -> Role
    fn to() -> RelationDef {
        super::role_menu::Relation::Role.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is RoleMenu -> Menu,
        // after `rev` it becomes Menu -> RoleMenu
        Some(super::role_menu::Relation::Menu.def().rev())
    }
}
impl ActiveModelBehavior for ActiveModel {}


#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct MenuBody {
    pub uid: i64,
    pub name: String,
    pub value: String,
}

#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct MenuQuery {
    pub uid: Option<i64>,
    pub name: Option<String>,
    pub value: Option<String>,
}

#[derive(Deserialize, Serialize, Debug, Clone)]
pub struct RequirePermission {
    pub perms: Vec<String>,
    pub check_type: CheckType,
}

#[allow(unused)]
impl RequirePermission {
    pub fn new(perms: Vec<&'_ str>, check_type: CheckType) -> RequirePermission {
        RequirePermission {
            perms: perms.into_iter().map(String::from).collect(),
            check_type,
        }
    }

    pub fn any(perms: Vec<&'_ str>) -> RequirePermission {
        RequirePermission {
            perms: perms.into_iter().map(String::from).collect(),
            check_type: CheckType::Or,
        }
    }

    pub fn all(perms: Vec<&'_ str>) -> RequirePermission {
        RequirePermission {
            perms: perms.into_iter().map(String::from).collect(),
            check_type: CheckType::And,
        }
    }
}

#[derive(Deserialize, Serialize, Debug, Clone)]
pub enum PermissionType {
    Token(String),
    User(String),
    Role(String),
}
