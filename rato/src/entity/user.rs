//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use crate::core::error::AppError;
use crate::to_redis_args;
use chrono::Utc;
use derive_builder::Builder;
use redis::RedisWrite;
use redis::ToRedisArgs;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "t_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub uid: i64,
    #[sea_orm(unique)]
    pub account: String,
    pub name: String,
    pub password: String,
    pub creator_id: i64,
    pub create_time: DateTimeUtc,
    pub updater_id: Option<i64>,
    pub update_time: Option<DateTimeUtc>,
    pub avatar: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::role::Entity> for Entity {
    // The final relation is User -> UserRole -> Role
    fn to() -> RelationDef {
        super::user_role::Relation::Role.def()
    }

    fn via() -> Option<RelationDef> {
        // The original relation is UserRole -> User,
        // after `rev` it becomes User -> UserRole
        Some(super::user_role::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Deserialize, Serialize, Clone, Debug, Builder, Default)]
#[builder(default, build_fn(error = "AppError"))]
pub struct LoginUser {
    pub uid: i64,
    pub name: String,
    pub account: Option<String>,
    pub password: Option<String>,
    pub creator_id: Option<i64>,
    pub create_time: Option<chrono::DateTime<Utc>>,
    pub updater_id: Option<i64>,
    pub update_time: Option<chrono::DateTime<Utc>>,
    pub perms: Option<Vec<String>>,
    pub roles: Option<Vec<String>>,
    pub token: Option<String>,
}

to_redis_args!(LoginUser);

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(default)]
pub struct LoginReq {
    pub account: String,
    pub password: String,
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(default)]
pub struct UserBody {
    pub uid: i64,
    pub account: String,
    pub password: String,
    pub name: String,
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(default)]
pub struct UserQuery {
    pub uid: Option<i64>,
    pub account: Option<String>,
    pub password: Option<String>,
    pub name: Option<String>,
}

#[derive(Debug, Clone, Deserialize, Default)]
#[serde(default)]
pub struct AuthRoleBody {
    pub user_id: i64,
    pub role_uids: Vec<i64>,
}
